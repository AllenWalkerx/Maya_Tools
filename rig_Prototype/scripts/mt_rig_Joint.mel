// Utilities for generating a joint skeleton
// Mike Ton (mike.ton@gmail.com)  6/12/2010
// cnCreateSkeleton() written by Cid Newman (cid_newman@yahoo.com)

global proc cnCreateSkeleton()
{
	string $jointList[] ={"Skeleton_Root","L_hip","L_knee","L_ankle","L_ball","L_toe","R_hip","R_knee",
	"R_ankle","R_ball","R_toe","Spine_1","Spine_2","Collar","Neck_1","Head_1","L_collar","L_shoulder",
	"L_elbow","L_forearm","L_wrist","L_pinky_1","L_pinky_2","L_pinky_end","L_ring_1","L_ring_2","L_ring_end",
	"L_middle_1","L_middle_2","L_middle_end","L_index_1","L_index_2","L_index_end","L_thumb_1","L_thumb_2",
	"L_thumb_end","R_collar","R_shoulder","R_elbow","R_forearm","R_wrist","R_pinky_1","R_pinky_2","R_pinky_end",
	"R_ring_1","R_ring_2","R_ring_end","R_middle_1","R_middle_2","R_middle_end","R_index_1","R_index_2",
	"R_index_end","R_thumb_1","R_thumb_2","R_thumb_end"};

	float $trans[] = {0.0,3.91,0.0,0.316,3.543,0.0,0.316,1.973,0.158,0.316,0.403,0.0,0.316,0.04,0.467,0.306,0.04,
	0.837,-0.316,3.543,0,-0.316,1.97,0.158,-0.316,0.403,0.0,-0.316,0.04,0.467,-0.316,0.04,0.847,0.0,3.9,0.0,0.0,
	4.522,0.0,0.0,5.547,0.0,0.0,5.635,0.0,0.0,5.874,0.0,0.11,5.546,0.0,0.52,5.546,0.0,1.456,5.546,0.142,1.9,5.546,
	0.305,2.345,5.546,0.468,2.756,5.546,0.492,2.849,5.546,0.526,2.942,5.546,0.56,2.729,5.546,0.566,2.84,5.55,0.607,
	2.951,5.546,0.648,2.702,5.546,0.64,2.831,5.546,0.688,2.961,5.546,0.735,2.675,5.546,0.715,2.786,5.546,0.755,2.897,
	5.546,0.796,2.537,5.546,0.748,2.619,5.523,0.796,2.7,5.467,0.785,-0.11,5.546,0.0,-0.52,5.546,0.0,-1.456,5.546,
	0.142,-1.9,5.546,0.3,-2.345,5.546,0.468,-2.756,5.546,0.492,-2.849,5.546,0.526,-2.942,5.546,0.56,-2.729,5.546,0.566,
	-2.84,5.546,0.607,-2.956,5.546,0.648,-2.7,5.546,0.64,-2.831,5.546,0.688,-2.961,5.546,0.735,-2.675,5.546,0.715,
	-2.786,5.546,0.755,-2.897,5.546,0.796,-2.537,5.546,0.748,-2.619,5.523,0.796,-2.7,5.467,0.785};
	
	string $parents[] = {"world","Skeleton_Root","L_hip","L_knee","L_ankle","L_ball","Skeleton_Root","R_hip",
	"R_knee","R_ankle","R_ball","Skeleton_Root","Spine_1","Spine_2","Collar","Neck_1","Collar","L_collar",
	"L_shoulder","L_elbow","L_elbow","L_wrist","L_pinky_1","L_pinky_2","L_wrist","L_ring_1","L_ring_2",
	"L_wrist","L_middle_1","L_middle_2","L_wrist","L_index_1","L_index_2","L_wrist","L_thumb_1","L_thumb_2",
	"Collar","R_collar","R_shoulder","R_elbow","R_elbow","R_wrist","R_pinky_1","R_pinky_2","R_wrist","R_ring_1",
	"R_ring_2","R_wrist","R_middle_1","R_middle_2","R_wrist","R_index_1","R_index_2","R_wrist","R_thumb_1","R_thumb_2"};


	int $numJoints = `size($jointList)`;
	
	float $xTrans, $yTrans, $zTrans;
	
	string $curUnit = `currentUnit -q -l`;
	float $multi    = `convertUnit -f "ft" -t $curUnit "1.0"`;

	for($i = 0, $x = 0; $i < $numJoints; $i++){
		joint -n $jointList[$i];
	
		if($i) parent $jointList[$i] $parents[$i];
		
		$xTrans = ($trans[$x++] * $multi);
		$yTrans = ($trans[$x++] * $multi);
		$zTrans = ($trans[$x++] * $multi);
	
		xform -ws -t $xTrans $yTrans $zTrans $jointList[$i];
	
		select -cl;
	}
	
	pointConstraint L_wrist L_elbow L_forearm;
	pointConstraint R_wrist R_elbow R_forearm;
	
	select -cl;	    
}

/***********************UTILITIES***********************/

proc mtSelHiearchy(){
	string $sel[] = `ls -sl`;
	select -hi $sel[0];
};

proc mtGenCluster(){
	ConvertSelectionToVertices;hilite;	selectType -ocm -alc false;selectType -ocm -polymeshVertex true;
	CreateCluster;
};

proc string[] mtOrientChain(string $jointIN){
	string $jointChain[] = mtGetJointChain($jointIN);
	string $jointChainParent[] ={};
		//unparent chain 
	for($node in $jointChain){
		string $parent[] = `listRelatives -p $node`;
		$jointChainParent[size($jointChainParent)] = $parent[0];
		if(size($parent) > 0){
			parent -w $node;
		}
	}
		//orient joints
	int $count = 0;
	string $tempLocAim[] = `spaceLocator -n "TEMPLOCATOR_AIM"`;
	string $tempLocRot[] = `spaceLocator -n "TEMPLOCATOR_ROT"`;
	for($node in $jointChain){
		$count += 1;
		float $jOrientInit[];
		if($count < size($jointChain))	//if not at the end of chain
		{
			string $aimObj = $jointChain[$count];
			string 	$posCon[] 	= `pointConstraint -offset 0 0 0 $node $tempLocRot[0]`;						delete $posCon;
					$posCon 	= `pointConstraint -offset 5 0 0 $node $tempLocAim[0]`;						delete $posCon;
			string $aimCon[] = `aimConstraint -aim 1 0 0 -u 0 1 0 -wut "object" -wuo ($tempLocAim[0])  $aimObj $tempLocRot[0]`;			delete $aimCon;
		}
		$jOrientInit = `xform -q -ws -ro $tempLocRot[0]`;
		mtResetJointOrient($node, $jOrientInit);
	}
		//reparent hiearchy
	$count = 0;
	for($node in $jointChain){
		if($jointChainParent[$count] != ""){	parent $node $jointChainParent[$count];}
		$count += 1;
	}
		//clean up temporary nodes
	delete $tempLocAim[0];
	delete $tempLocRot[0];
	return {"true"};
}

proc string mtResetJointOrient(string $jointIN, float $rotIN[]){
	setAttr ($jointIN+".jointOrientX") $rotIN[0];
	setAttr ($jointIN+".jointOrientY") $rotIN[1];
	setAttr ($jointIN+".jointOrientZ") $rotIN[2];
		setAttr ($jointIN+".rotateX") 0.0;
		setAttr ($jointIN+".rotateY") 0.0;
		setAttr ($jointIN+".rotateZ") 0.0;
	return "true";
}

proc string[] mtGetJointChain(string $jointIN){
	string $children[] = `listRelatives -ad $jointIN`;
	string $returnjointChain[] = mtReverseArray($children);
	stringArrayInsertAtIndex(0, $returnjointChain, $jointIN);
	return $returnjointChain;
}

proc string[] mtGetJointChainSegment(string $jointStart, string $jointEnd){
	string $tempNodeCollection[] = {$jointEnd};
	int $break = 0;
	int $count = 0;
	while($break == 0){
		string $currNode[] = `pickWalk -d up $tempNodeCollection[$count]`;

		if($currNode[0] == $tempNodeCollection[$count]){		//absolute end of chain : STOP
			$break = 1; 
		}
		else if($currNode[0] == $jointStart){ 					//reached specify end : Stop but include last entry
			$break = 1; 
			$count +=1;
			$tempNodeCollection[$count] = $currNode[0];
		}
		else{												//add to chain
			$count +=1;
			$tempNodeCollection[$count] = $currNode[0];
		}		
	}
	string $returnjointChain[] = mtReverseArray($tempNodeCollection);
	return $returnjointChain;
}

proc string mtPruneChain(string $chainIN[], string $jointEnd){
	for($joint in $chainIN){
		string $buffer[];
		int $numTokens = `tokenize $joint "|" $buffer`;
		if($buffer[$numTokens-1] == $jointEnd){
			string $deleteJoints[] = `listRelatives -c -pa $joint`;
			for($delJoint in $deleteJoints){		delete $delJoint;	}
		}
	}
	return "true";
}

proc string[] mtReverseArray(string $arrayIN[]){
	int $count = size($arrayIN);
	string $returnArray[];
	for($entry in $arrayIN){
		$count -= 1;
		$returnArray[$count] = $entry;
	}
	return $returnArray;
}

